lpc <- cluster_label_prop(karate)
lpc1 <- unname(membership(lpc))
lpc2 <- V(karate)$Faction
jaccard_table_lp <- jaccard_sim(lpc1, lpc2)
print("Jaccard index between clusters created by Label Propagation algorithm and ground truth clusters")
print(jaccard_table_lp)
wc <- cluster_walktrap(karate)
c1 <- unname(membership(wc))
c2 <- V(karate)$Faction
jaccard_table_w <- jaccard_sim(c1, c2)
print("Jaccard index between clusters created by Walktrap algorithm and ground truth clusters")
print(jaccard_table_w)
ebc <- cluster_edge_betweenness(karate)
ebc1 <- unname(membership(ebc))
ebc2 <- V(karate)$Faction
jaccard_table_eb <- jaccard_sim(ebc1, ebc2)
print("Jaccard index between clusters created by Edge Betweenness algorithm and ground truth clusters")
print(jaccard_table_eb)
# Function to find most similar cluster in clustering 2 to each cluster of clustering 1
match_clusters <- function(table, name1, name2) {
clusters <- apply(table, 1, which.max)
jaccard_indices <- table[cbind(1:nrow(table), clusters)]
names(jaccard_indices) <- paste0(
"(", name1, ".", 1:nrow(table), ",",
name2, ".", clusters, ")"
)
return(jaccard_indices)
}
matched_clusters_l <- match_clusters(jaccard_table_l, "LC", "GT")
print("Most similar cluster in clustering 2 (GT) to each cluster of clustering 1 (LC)")
print(matched_clusters_l)
matched_clusters_lp <- match_clusters(jaccard_table_lp, "LPC", "GT")
print("Most similar cluster in clustering 2 (GT) to each cluster of clustering 1 (LPC)")
print(matched_clusters_lp)
matched_clusters_w <- match_clusters(jaccard_table_w, "WC", "GT")
print("Most similar cluster in clustering 2 (GT) to each cluster of clustering 1 (WC)")
print(matched_clusters_w)
matched_clusters_eb <- match_clusters(jaccard_table_eb, "EBC", "GT")
print("Most similar cluster in clustering 2 (GT) to each cluster of clustering 1 (EBC)")
print(matched_clusters_eb)
# Weighted mean
Wmean <- function(v, w) {
return(as.numeric(v %*% w))
}
# Average of jaccard indices weighted by fraction of number of nodes
# Compute fraction of number of nodes
w <- table(lc1) / length(lc1)
global_jaccard_sim_l <- Wmean(matched_clusters_l, w)
print("Global Jaccard similarity of clusters produced by Louvain algorithm")
print(global_jaccard_sim_l)
w <- table(lpc1) / length(lpc1)
global_jaccard_sim_lp <- Wmean(matched_clusters_lp, w)
print("Global Jaccard similarity of clusters produced by Label Propagation algorithm")
print(global_jaccard_sim_lp)
w <- table(c1) / length(c1)
global_jaccard_sim_w <- Wmean(matched_clusters_w, w)
print("Global Jaccard similarity of clusters produced by Walktrap algorithm")
print(global_jaccard_sim_w)
w <- table(ebc1) / length(ebc1)
global_jaccard_sim_eb <- Wmean(matched_clusters_eb, w)
print("Global Jaccard similarity of clusters produced by Edge Betweenness algorithm")
print(global_jaccard_sim_eb)
# Function to compute harmonic mean
Hmean <- function(v) {
return(length(v) / sum(1 / v))
}
# Calculate Harmonic Mean Global Jaccard Similarity
harmonic_jaccard_sim_l <- Hmean(matched_clusters_l)
print("Harmonic Jaccard similarity of clusters produced by Louvain algorithm")
print(harmonic_jaccard_sim_l)
harmonic_jaccard_sim_lp <- Hmean(matched_clusters_lp)
print("Harmonic Jaccard similarity of clusters produced by Label Propagation algorithm")
print(harmonic_jaccard_sim_lp)
harmonic_jaccard_sim_w <- Hmean(matched_clusters_w)
print("Harmonic Jaccard similarity of clusters produced by Walktrap algorithm")
print(harmonic_jaccard_sim_w)
harmonic_jaccard_sim_eb <- Hmean(matched_clusters_eb)
print("Harmonic Jaccard similarity of clusters produced by Edge Betweenness algorithm")
print(harmonic_jaccard_sim_eb)
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
# Print the final results
print("Final modularity and coverage results:")
print(modularity_coverage_results)
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
max(modularity_scores)
modularity_scores
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
modularity_coverage_results
modularity_coverage_results
modularity_coverage_results[1]
modularity_coverage_results[1,1]
modularity_coverage_results[1][1]
modularity_coverage_results[1][1][1]
modularity_coverage_results[1]
modularity_coverage_results$Enron
modularity_coverage_results$Enron$modularity
max <- max(modularity_coverage_results$Enron$modularity)
max
modularity_coverage_results$Enron$modularity
modularity_coverage_results$Enron$modularity
modularity_coverage_results$Enron$coverage
modularity_coverage_results$Enron$modularity
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
modularity_coverage_results$Enron$modularity
modularity_coverage_results$Enron$coverage
modularity_coverage_results$Dolphins$modularity
modularity_coverage_results$Dolphins$coverage
modularity_coverage_results$Dolphins$modularity
modularity_coverage_results$Dolphins$coverage
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
modularity_coverage_results$Enron$modularity
modularity_coverage_results$Enron$coverage
modularity_coverage_results$Dolphins$modularity
modularity_coverage_results$Dolphins$coverage
networks <- list(
Karate = list(graph = karate, ground_truth = V(karate)$Faction),
Synthetic = list(graph = synthetic, ground_truth = V(synthetic)$label)
)
networks_without_gt <- list(
Enron = list(graph = enron, best_clustering = "Louvain"),
Dolphins = list(graph = dolphins, best_clustering = "EdgeBetweenness")
)
compute_jaccard <- function(clustering, ground_truth) {
jaccard_table <- jaccard_sim(clustering, ground_truth)
weights <- table(clustering) / length(clustering)
global_jaccard <- Wmean(apply(jaccard_table, 1, max), weights)
list(local = jaccard_table, global = global_jaccard)
}
results <- list()
for (network_name in names(networks)) {
network <- networks[[network_name]]
graph <- network$graph
ground_truth <- network$ground_truth
cat("\nEvaluating", network_name, "Network:\n")
# Evaluate clustering significance
res <- evaluate_significance(graph, alg_list = algorithms, gt_clustering = ground_truth)
# Compute Jaccard indices for each algorithm
jaccard_indices <- lapply(algorithms, function(algo) {
clustering <- membership(algo(graph))
compute_jaccard(clustering, ground_truth)
})
results[[network_name]] <- list(significance = res, jaccard = jaccard_indices)
print(res)
# Print Jaccard indices
cat("\nJaccard Indices:\n")
for (algo_name in names(jaccard_indices)) {
jaccard <- jaccard_indices[[algo_name]]
cat("\nAlgorithm:", algo_name, "\n")
cat("Global Jaccard Index:", jaccard$global, "\n")
cat("Local Jaccard Table:\n")
print(jaccard$local)
}
}
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
modularity_coverage_results$Enron$modularity
modularity_coverage_results$Enron$coverage
modularity_coverage_results$Dolphins$modularity
modularity_coverage_results$Dolphins$coverage
networks <- list(
Karate = list(graph = karate, ground_truth = V(karate)$Faction),
Synthetic = list(graph = synthetic, ground_truth = V(synthetic)$label),
Enron = list(graph = enron, best_clustering = "Louvain"),
Dolphins = list(graph = dolphins, best_clustering = "EdgeBetweenness")
)
compute_jaccard <- function(clustering, ground_truth) {
jaccard_table <- jaccard_sim(clustering, ground_truth)
weights <- table(clustering) / length(clustering)
global_jaccard <- Wmean(apply(jaccard_table, 1, max), weights)
list(local = jaccard_table, global = global_jaccard)
}
results <- list()
for (network_name in names(networks)) {
network <- networks[[network_name]]
graph <- network$graph
ground_truth <- network$ground_truth
cat("\nEvaluating", network_name, "Network:\n")
# Evaluate clustering significance
res <- evaluate_significance(graph, alg_list = algorithms, gt_clustering = ground_truth)
# Compute Jaccard indices for each algorithm
jaccard_indices <- lapply(algorithms, function(algo) {
clustering <- membership(algo(graph))
compute_jaccard(clustering, ground_truth)
})
results[[network_name]] <- list(significance = res, jaccard = jaccard_indices)
print(res)
# Print Jaccard indices
cat("\nJaccard Indices:\n")
for (algo_name in names(jaccard_indices)) {
jaccard <- jaccard_indices[[algo_name]]
cat("\nAlgorithm:", algo_name, "\n")
cat("Global Jaccard Index:", jaccard$global, "\n")
cat("Local Jaccard Table:\n")
print(jaccard$local)
}
}
# Define clustering algorithms
algorithms <- list(
Louvain = cluster_louvain,
LabelPropagation = cluster_label_prop,
Walktrap = cluster_walktrap,
EdgeBetweenness = cluster_edge_betweenness
)
# Networks without ground truth
networks_without_gt <- list(
Enron = enron,
Dolphins = dolphins
)
# Initialize a list to store modularity and coverage results
modularity_coverage_results <- list()
# Apply evaluate_significance once to each network without ground truth
for (network_name in names(networks_without_gt)) {
graph <- networks_without_gt[[network_name]]
cat("\nEvaluating", network_name, "Network:\n")
# Apply evaluate_significance
res <- evaluate_significance(graph, alg_list = algorithms)
# Extract modularity and coverage for each algorithm
modularity_scores <- res[14, ]  # Row 14 contains modularity
coverage_scores <- res[19, ]   # Row 19 contains coverage
# Store results in the main list
modularity_coverage_results[[network_name]] <- list(
modularity = modularity_scores,
coverage = coverage_scores
)
# Print modularity and coverage for debugging
cat("Modularity Scores:", modularity_scores, "\n")
cat("Coverage Scores:", coverage_scores, "\n")
}
modularity_coverage_results$Enron$modularity
modularity_coverage_results$Enron$coverage
modularity_coverage_results$Dolphins$modularity
modularity_coverage_results$Dolphins$coverage
# Define networks and assign specific ground truths
networks <- list(
Karate = list(graph = karate, ground_truth = V(karate)$Faction),
Synthetic = list(graph = synthetic, ground_truth = V(synthetic)$label),
Enron = list(graph = enron, ground_truth = membership(cluster_louvain(enron))),  # Louvain as ground truth
Dolphins = list(graph = dolphins, ground_truth = membership(cluster_edge_betweenness(dolphins)))  # Edge Betweenness as ground truth
)
# Function to compute Jaccard indices
compute_jaccard <- function(clustering, ground_truth) {
jaccard_table <- jaccard_sim(clustering, ground_truth)
weights <- table(clustering) / length(clustering)
global_jaccard <- Wmean(apply(jaccard_table, 1, max), weights)
list(local = jaccard_table, global = global_jaccard)
}
# Initialize results
results <- list()
for (network_name in names(networks)) {
network <- networks[[network_name]]
graph <- network$graph
ground_truth <- network$ground_truth
cat("\nEvaluating", network_name, "Network:\n")
# Evaluate clustering significance
res <- evaluate_significance(graph, alg_list = algorithms, gt_clustering = ground_truth)
# Compute Jaccard indices for each algorithm
jaccard_indices <- lapply(algorithms, function(algo) {
clustering <- membership(algo(graph))
compute_jaccard(clustering, ground_truth)
})
# Store results
results[[network_name]] <- list(significance = res, jaccard = jaccard_indices)
print(res)
# Print Jaccard indices
cat("\nJaccard Indices:\n")
for (algo_name in names(jaccard_indices)) {
jaccard <- jaccard_indices[[algo_name]]
cat("\nAlgorithm:", algo_name, "\n")
cat("Global Jaccard Index:", jaccard$global, "\n")
cat("Local Jaccard Table:\n")
print(jaccard$local)
}
}
modularity_coverage_results$Dolphins$modularity
modularity_coverage_results$Dolphins$coverage
